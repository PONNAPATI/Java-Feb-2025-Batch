Explanation
    Inheritance:

        Car and Bike are subclasses of Vehicle.
        They inherit Vehicle’s properties and methods.

Method Overriding:

        Car and Bike override the startEngine() method defined in Vehicle.
        The method signatures are the same (public void startEngine()), but the implementations differ.

Polymorphism:

        In the main method, each object (v1, v2, v3) is declared as a Vehicle but instantiated as different subtypes (Vehicle, Car, Bike).
        When startEngine() is called, Java dynamically determines which class’s version to call based on the actual object type.
        This is runtime polymorphism (also called dynamic dispatch).

Polymorphism

        In the main method, we declare each variable (v1, v2, v3) with the parent type Vehicle.
        We then instantiate them as different subclasses (Vehicle, Car, Bike).
        When we call startEngine(), Java decides which method to execute at runtime, based on the actual object type:
            v1 is a plain Vehicle → prints the Vehicle message.
            v2 is actually a Car → prints the Car message.
            v3 is actually a Bike → prints the Bike message.

Usage:

        This approach allows you to write code that can work with Vehicle references generally, while letting each subclass provide its unique behavior.
        In a larger application, you might have multiple vehicle types (cars, bikes, trucks, etc.) all override startEngine() differently,
                        but the rest of the code can just call startEngine() on a Vehicle reference without worrying about the specifics.

Conclusion:

        The code demonstrates how inheritance and method overriding in Java let subclasses tailor parent class methods to their needs.
        With polymorphism, the actual type of the object at runtime decides which overridden method gets executed.